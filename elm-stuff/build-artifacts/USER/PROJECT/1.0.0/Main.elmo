Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var displayPlayer = function (player) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: player.x
                                    ,_1: player.y})($Graphics$Collage.toForm(A3($Graphics$Element.image,
      28,
      29,
      "images/gorilla.png")));
   };
   var displaySun = function (sun) {
      return function () {
         var img = sun.smiling ? "images/sun-smile.png" : "images/sun-oface.png";
         return $Graphics$Collage.move({ctor: "_Tuple2"
                                       ,_0: sun.x
                                       ,_1: sun.y})($Graphics$Collage.toForm(A3($Graphics$Element.image,
         43,
         33,
         img)));
      }();
   };
   var renderSkyline = function (skyline) {
      return $Graphics$Collage.group(A2($List.map,
      function (building) {
         return A2($Graphics$Collage.move,
         {ctor: "_Tuple2"
         ,_0: building.x
         ,_1: building.y},
         A2($Graphics$Collage.outlined,
         $Graphics$Collage.solid($Color.green),
         A2($Graphics$Collage.rect,
         building.width,
         building.height)));
      },
      skyline));
   };
   var stepGame = F2(function (input,
   game) {
      return A2($Debug.watch,
      "Game",
      game);
   });
   var player = F3(function (x,
   y,
   name) {
      return {_: {}
             ,name: name
             ,score: 0
             ,x: x
             ,y: y};
   });
   var Game = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return {_: {}
                                        ,banana: f
                                        ,gravity: g
                                        ,playTo: h
                                        ,player1: b
                                        ,player2: c
                                        ,seed: j
                                        ,skyline: d
                                        ,state: a
                                        ,sun: i
                                        ,wind: e};
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var InvertedV = {ctor: "InvertedV"};
   var V = {ctor: "V"};
   var Downward = {ctor: "Downward"};
   var Upward = {ctor: "Upward"};
   var Wind = F2(function (a,b) {
      return {_: {}
             ,direction: a
             ,strength: b};
   });
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var wind = {_: {}
              ,direction: Left
              ,strength: 0.5};
   var Object = F3(function (a,
   b,
   c) {
      return _U.insert("y",
      b,
      _U.insert("x",a,c));
   });
   var Win = function (a) {
      return {ctor: "Win",_0: a};
   };
   var Turn = function (a) {
      return {ctor: "Turn",_0: a};
   };
   var Pause = {ctor: "Pause"};
   var Intro = {ctor: "Intro"};
   var gap = 2;
   var $ = {ctor: "_Tuple2"
           ,_0: 75
           ,_1: 200},
   minBuildingHeight = $._0,
   maxBuildingHeight = $._1;
   var buildingHeights = F3(function (numBuildings,
   heights,
   seed) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$float,
         minBuildingHeight,
         maxBuildingHeight),
         seed),
         height = $._0,
         seed$ = $._1;
         return _U.eq(numBuildings,
         0) ? {ctor: "_Tuple2"
              ,_0: heights
              ,_1: seed$} : A3(buildingHeights,
         numBuildings - 1,
         A2($List._op["::"],
         height,
         heights),
         seed$);
      }();
   });
   var $ = {ctor: "_Tuple2"
           ,_0: 30
           ,_1: 120},
   minBuildingWidth = $._0,
   maxBuildingWidth = $._1;
   var $ = {ctor: "_Tuple2"
           ,_0: 640
           ,_1: 350},
   gameWidth = $._0,
   gameHeight = $._1;
   var $ = {ctor: "_Tuple2"
           ,_0: gameWidth / 2
           ,_1: gameHeight / 2},
   halfWidth = $._0,
   halfHeight = $._1;
   var yPositions = function (skyline) {
      return A2($List.map,
      function (n) {
         return n.height / 2 - halfHeight + 20;
      },
      skyline);
   };
   var buildingWidths = F2(function (widths,
   seed) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$float,
         minBuildingWidth,
         maxBuildingWidth),
         seed),
         next = $._0,
         seed$ = $._1;
         var total = A3($List.foldr,
         F2(function (x,y) {
            return x + y;
         }),
         0,
         widths);
         return _U.cmp(total + next,
         gameWidth) > 0 ? A2(F2(function (v0,
         v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         A2($List._op["::"],
         gameWidth - total,
         widths),
         seed$) : A2(buildingWidths,
         A2($List._op["::"],next,widths),
         seed$);
      }();
   });
   var xPositions = F2(function (skyline,
   positions) {
      return function () {
         var total = gameWidth - A3($List.foldr,
         F2(function (building,next) {
            return building.width + next;
         }),
         0,
         skyline);
         return _U.eq($List.length(skyline),
         0) ? positions : A2(xPositions,
         $List.tail(skyline),
         $Array.toList(A2($Array.push,
         halfWidth - function (_) {
            return _.width;
         }($List.head(skyline)) / 2 - total,
         $Array.fromList(positions))));
      }();
   });
   var generateSkyline = function (seed) {
      return function () {
         var $ = A2(buildingWidths,
         _L.fromArray([]),
         seed),
         widths = $._0,
         seed$ = $._1;
         var $ = A3(buildingHeights,
         $List.length(widths),
         _L.fromArray([]),
         seed$),
         heights = $._0,
         seed$$ = $._1;
         var buildings = A3($List.map2,
         F2(function (w,h) {
            return {_: {}
                   ,height: h
                   ,width: w};
         }),
         widths,
         heights);
         var xPos = A3($List.map2,
         F2(function (x,building) {
            return _U.insert("x",
            x,
            building);
         }),
         A2(xPositions,
         buildings,
         _L.fromArray([])),
         buildings);
         return A2(F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         A3($List.map2,
         F2(function (y,building) {
            return _U.insert("y",
            y,
            building);
         }),
         yPositions(buildings),
         xPos),
         seed$$);
      }();
   };
   var defaultGame = function () {
      var seed = $Random.initialSeed(42);
      var $ = generateSkyline(seed),
      skyline = $._0,
      seed$ = $._1;
      return {_: {}
             ,banana: {_: {}
                      ,displayed: false
                      ,rotation: 0
                      ,vx: 0
                      ,vy: 0
                      ,x: 0
                      ,y: 0}
             ,gravity: 9.3
             ,playTo: 3
             ,player1: A3(player,
             -60,
             0,
             "Player 1")
             ,player2: A3(player,
             60,
             0,
             "Player 2")
             ,seed: seed
             ,skyline: A2($List.map,
             function (building) {
                return _U.replace([["width"
                                   ,building.width - gap]],
                building);
             },
             skyline)
             ,state: Pause
             ,sun: {_: {}
                   ,smiling: true
                   ,x: 0
                   ,y: halfHeight - 40}
             ,wind: wind};
   }();
   var gameCollage = F2(function (_v0,
   game) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var elements = _U.eq(game.state,
                 Intro) ? _L.fromArray([A2($Graphics$Collage.filled,
                 A3($Color.rgb,0,0,0),
                 A2($Graphics$Collage.rect,
                 gameWidth,
                 gameHeight))]) : _L.fromArray([A2($Graphics$Collage.filled,
                                               A3($Color.rgb,0,0,173),
                                               A2($Graphics$Collage.rect,
                                               gameWidth,
                                               gameHeight))
                                               ,renderSkyline(game.skyline)
                                               ,displaySun(game.sun)
                                               ,displayPlayer(game.player1)
                                               ,displayPlayer(game.player2)]);
                 return A3($Graphics$Collage.collage,
                 gameWidth,
                 gameHeight,
                 elements);
              }();}
         _U.badCase($moduleName,
         "between lines 184 and 195");
      }();
   });
   var display = F2(function (_v4,
   game) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return A3($Graphics$Element.container,
              _v4._0,
              _v4._1,
              $Graphics$Element.middle)(A2(gameCollage,
              {ctor: "_Tuple2"
              ,_0: _v4._0
              ,_1: _v4._1},
              game));}
         _U.badCase($moduleName,
         "on line 199, column 5 to 51");
      }();
   });
   var delta = A2($Signal._op["<~"],
   $Time.inSeconds,
   $Time.fps(60));
   var Input = function (a) {
      return {_: {},keys: a};
   };
   var input = $Signal.sampleOn(delta)(A2($Signal._op["<~"],
   Input,
   $Keyboard.keysDown));
   var gameState = A3($Signal.foldp,
   stepGame,
   defaultGame,
   input);
   var main = A3($Signal.map2,
   display,
   $Window.dimensions,
   gameState);
   _elm.Main.values = {_op: _op
                      ,Input: Input
                      ,delta: delta
                      ,input: input
                      ,gameHeight: gameHeight
                      ,gameWidth: gameWidth
                      ,halfHeight: halfHeight
                      ,halfWidth: halfWidth
                      ,maxBuildingWidth: maxBuildingWidth
                      ,minBuildingWidth: minBuildingWidth
                      ,maxBuildingHeight: maxBuildingHeight
                      ,minBuildingHeight: minBuildingHeight
                      ,gap: gap
                      ,Intro: Intro
                      ,Pause: Pause
                      ,Turn: Turn
                      ,Win: Win
                      ,Object: Object
                      ,Left: Left
                      ,Right: Right
                      ,Wind: Wind
                      ,Upward: Upward
                      ,Downward: Downward
                      ,V: V
                      ,InvertedV: InvertedV
                      ,Game: Game
                      ,wind: wind
                      ,buildingWidths: buildingWidths
                      ,buildingHeights: buildingHeights
                      ,xPositions: xPositions
                      ,yPositions: yPositions
                      ,generateSkyline: generateSkyline
                      ,player: player
                      ,defaultGame: defaultGame
                      ,stepGame: stepGame
                      ,gameState: gameState
                      ,renderSkyline: renderSkyline
                      ,displaySun: displaySun
                      ,displayPlayer: displayPlayer
                      ,gameCollage: gameCollage
                      ,display: display
                      ,main: main};
   return _elm.Main.values;
};